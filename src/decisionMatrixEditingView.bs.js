// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Dialog from "./dialog.bs.js";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as Styles from "./styles.bs.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Tea_html from "bucklescript-tea/src-ocaml/tea_html.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as DecisionMatrix from "./decisionMatrix.bs.js";
import * as DecisionMatrixEditing from "./decisionMatrixEditing.bs.js";

function button_view($staropt$star, title, msg) {
  var enabled = $staropt$star !== undefined ? $staropt$star : true;
  return Tea_html.button(undefined, undefined, /* :: */[
              Tea_html.onClick(msg),
              /* :: */[
                Tea_html.Attributes.disabled(!enabled),
                /* [] */0
              ]
            ], /* :: */[
              Tea_html.text(title),
              /* [] */0
            ]);
}

function button_link(txt, message, additional_class) {
  return Tea_html.a(undefined, undefined, /* :: */[
              Tea_html.onClick(message),
              /* :: */[
                Tea_html.classList(/* :: */[
                      /* tuple */[
                        additional_class,
                        true
                      ],
                      /* :: */[
                        /* tuple */[
                          Styles.button_link_class,
                          true
                        ],
                        /* [] */0
                      ]
                    ]),
                /* [] */0
              ]
            ], /* :: */[
              Tea_html.text(txt),
              /* [] */0
            ]);
}

function container_view(param) {
  return Tea_html.div(undefined, undefined, /* [] */0, param);
}

function decision_matrix_view($staropt$star, $staropt$star$1, $staropt$star$2, matrix) {
  var change_cell_value_opt = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : undefined;
  var header_message_for_dimension_name_opt = $staropt$star$1 !== undefined ? Caml_option.valFromOption($staropt$star$1) : undefined;
  var should_highlight_cell_opt = $staropt$star$2 !== undefined ? Caml_option.valFromOption($staropt$star$2) : undefined;
  var editable_cell_styling;
  if (should_highlight_cell_opt !== undefined) {
    var should_highlight_cell = should_highlight_cell_opt;
    editable_cell_styling = (function (alternative, factor) {
        var b = Curry._2(should_highlight_cell, alternative, factor);
        return Tea_html.classList(/* :: */[
                    /* tuple */[
                      Styles.highlight_class,
                      b
                    ],
                    /* [] */0
                  ]);
      });
  } else {
    editable_cell_styling = (function (param, param$1) {
        return Tea_html.noProp;
      });
  }
  var readonly_dimension_name_header = function (name) {
    return Tea_html.th(undefined, undefined, /* [] */0, /* :: */[
                Tea_html.span(undefined, undefined, /* [] */0, /* :: */[
                      Tea_html.text(DecisionMatrix.DecisionMatrix.dimension_name_string(name)),
                      /* [] */0
                    ]),
                /* [] */0
              ]);
  };
  var link_header_cell;
  if (header_message_for_dimension_name_opt !== undefined) {
    var header_message_for_dimension_name = header_message_for_dimension_name_opt;
    link_header_cell = (function (name) {
        var match = Curry._1(header_message_for_dimension_name, name);
        if (match !== undefined) {
          return Tea_html.th(undefined, undefined, /* [] */0, /* :: */[
                      Tea_html.a(undefined, undefined, /* :: */[
                            Tea_html.onClick(Caml_option.valFromOption(match)),
                            /* [] */0
                          ], /* :: */[
                            Tea_html.text(DecisionMatrix.DecisionMatrix.dimension_name_string(name)),
                            /* [] */0
                          ]),
                      /* [] */0
                    ]);
        } else {
          return readonly_dimension_name_header(name);
        }
      });
  } else {
    link_header_cell = readonly_dimension_name_header;
  }
  var header_cell = function (s) {
    return Tea_html.th(undefined, undefined, /* [] */0, /* :: */[
                Tea_html.text(s),
                /* [] */0
              ]);
  };
  var readonly_span = function (v) {
    return Tea_html.span(undefined, undefined, /* :: */[
                Tea_html.class$prime(Styles.cell_value_class),
                /* [] */0
              ], Belt_List.make(1, Tea_html.text(String(v))));
  };
  var editable_cell_value = function ($staropt$star) {
    var additional_class_opt = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : undefined;
    if (change_cell_value_opt !== undefined) {
      var change_cell_value = change_cell_value_opt;
      return (function (alternative_name, param) {
          var factor_name = param[0];
          return Tea_html.td(undefined, undefined, /* :: */[
                      Curry._2(editable_cell_styling, alternative_name, factor_name),
                      /* :: */[
                        additional_class_opt !== undefined ? Tea_html.class$prime(additional_class_opt) : Tea_html.noProp,
                        /* [] */0
                      ]
                    ], /* :: */[
                      Tea_html.input$prime(undefined, undefined, /* :: */[
                            Tea_html.onInput(undefined, Curry._2(change_cell_value, alternative_name, factor_name)),
                            /* :: */[
                              Tea_html.value(String(param[1])),
                              /* :: */[
                                Tea_html.type$prime("number"),
                                /* :: */[
                                  Tea_html.class$prime(Styles.cell_value_class),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ], /* [] */0),
                      /* [] */0
                    ]);
        });
    } else {
      return (function (alternative_name, param) {
          return Tea_html.td(undefined, undefined, /* :: */[
                      Curry._2(editable_cell_styling, alternative_name, param[0]),
                      /* [] */0
                    ], /* :: */[
                      readonly_span(param[1]),
                      /* [] */0
                    ]);
        });
    }
  };
  var header_row = function (factor_names) {
    var factor_view = function (factor_name) {
      return Curry._1(link_header_cell, /* FactorName */Block.__(0, [factor_name]));
    };
    return Tea_html.tr(undefined, undefined, /* [] */0, List.concat(/* :: */[
                    /* :: */[
                      header_cell("Factors"),
                      /* [] */0
                    ],
                    /* :: */[
                      List.map(factor_view, factor_names),
                      /* :: */[
                        /* :: */[
                          header_cell(""),
                          /* [] */0
                        ],
                        /* [] */0
                      ]
                    ]
                  ]));
  };
  var match = DecisionMatrix.DecisionMatrix.weight_cells(matrix);
  var weights_name = match[0];
  var partial_arg = editable_cell_value(Caml_option.some(Styles.weight_cell_class));
  var weights_row = Tea_html.tr(undefined, undefined, /* [] */0, List.concat(/* :: */[
            /* :: */[
              header_cell("Weight"),
              /* [] */0
            ],
            /* :: */[
              List.map((function (param) {
                      return partial_arg(weights_name, param);
                    }), match[1]),
              /* :: */[
                /* :: */[
                  Tea_html.th(undefined, undefined, /* :: */[
                        Tea_html.class$prime(Styles.score_class),
                        /* [] */0
                      ], /* :: */[
                        Tea_html.text("Score"),
                        /* [] */0
                      ]),
                  /* [] */0
                ],
                /* [] */0
              ]
            ]
          ]));
  var alternative_row = function (param) {
    var name = param[/* name */0];
    var partial_arg = editable_cell_value(undefined);
    return Tea_html.tr(undefined, undefined, /* [] */0, List.concat(/* :: */[
                    /* :: */[
                      Curry._1(link_header_cell, /* AlternativeName */Block.__(1, [name])),
                      /* [] */0
                    ],
                    /* :: */[
                      List.map((function (param) {
                              return partial_arg(name, param);
                            }), param[/* values */1]),
                      /* :: */[
                        /* :: */[
                          Tea_html.td(undefined, undefined, /* :: */[
                                Tea_html.class$prime(Styles.score_class),
                                /* [] */0
                              ], /* :: */[
                                readonly_span(param[/* score */2]),
                                /* [] */0
                              ]),
                          /* [] */0
                        ],
                        /* [] */0
                      ]
                    ]
                  ]));
  };
  var factor_names = DecisionMatrix.DecisionMatrix.factor_names(matrix);
  var alternatives = DecisionMatrix.DecisionMatrix.alternatives(matrix);
  var almost_there_messsage_text = function (required) {
    return Tea_html.text(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "Almost there! Add at least one ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* String_literal */Block.__(11, [
                                    " to start filling in the the Decision Matrix.",
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "Almost there! Add at least one %s to start filling in the the Decision Matrix."
                      ]), required));
  };
  if (factor_names) {
    if (!alternatives) {
      return Tea_html.p(undefined, undefined, /* [] */0, /* :: */[
                  almost_there_messsage_text(DecisionMatrix.DecisionMatrix.alternative_editing[/* label */0]),
                  /* [] */0
                ]);
    }
    
  } else if (!alternatives) {
    return Tea_html.p(undefined, undefined, /* [] */0, /* :: */[
                Tea_html.text(Curry._2(Printf.sprintf(/* Format */[
                              /* String_literal */Block.__(11, [
                                  "Add ",
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* String_literal */Block.__(11, [
                                          "s and ",
                                          /* String */Block.__(2, [
                                              /* No_padding */0,
                                              /* String_literal */Block.__(11, [
                                                  "s using the buttons above to start filling in the Decision Matrix.",
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ])
                                    ])
                                ]),
                              "Add %ss and %ss using the buttons above to start filling in the Decision Matrix."
                            ]), DecisionMatrix.DecisionMatrix.alternative_editing[/* label */0], DecisionMatrix.DecisionMatrix.factor_editing[/* label */0])),
                /* [] */0
              ]);
  }
  if (factor_names) {
    return Tea_html.table(undefined, undefined, /* [] */0, /* :: */[
                header_row(factor_names),
                /* :: */[
                  weights_row,
                  List.map(alternative_row, alternatives)
                ]
              ]);
  } else {
    return Tea_html.p(undefined, undefined, /* [] */0, /* :: */[
                almost_there_messsage_text(DecisionMatrix.DecisionMatrix.factor_editing[/* label */0]),
                /* [] */0
              ]);
  }
}

function should_display_matrix_view(matrix) {
  var factors = DecisionMatrix.DecisionMatrix.factor_names(matrix);
  var alternatives = DecisionMatrix.DecisionMatrix.alternatives(matrix);
  return !(factors === /* [] */0 || alternatives === /* [] */0);
}

function error_view(msg_opt) {
  return Tea_html.span(undefined, undefined, /* :: */[
              Tea_html.class$prime(Styles.error_class),
              /* [] */0
            ], /* :: */[
              Tea_html.text(Belt_Option.getWithDefault(msg_opt, "")),
              /* [] */0
            ]);
}

function update_name_view(caption, current_value, error_message) {
  return container_view(/* :: */[
              container_view(/* :: */[
                    Tea_html.label(undefined, undefined, /* [] */0, /* :: */[
                          Tea_html.text(caption),
                          /* [] */0
                        ]),
                    /* :: */[
                      Tea_html.input$prime(undefined, undefined, /* :: */[
                            Tea_html.value(current_value),
                            /* :: */[
                              Tea_html.onInput(undefined, (function (name) {
                                      return /* UpdateName */Block.__(3, [name]);
                                    })),
                              /* :: */[
                                Tea_html.autofocus(true),
                                /* :: */[
                                  Tea_html.classList(/* :: */[
                                        /* tuple */[
                                          Styles.error_class,
                                          Belt_Option.isSome(error_message)
                                        ],
                                        /* [] */0
                                      ]),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ], /* [] */0),
                      /* :: */[
                        button_view(Belt_Option.isNone(error_message), "Commit", /* Commit */1),
                        /* :: */[
                          button_view(undefined, "Cancel", /* Cancel */0),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
              /* :: */[
                error_view(error_message),
                /* [] */0
              ]
            ]);
}

function adding_view(adding_info, error_message) {
  return update_name_view(Curry._1(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "New ",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "New %s"
                    ]), DecisionMatrixEditing.DimensionToEdit.label(adding_info[/* dimension_editing */0])), adding_info[/* new_name */1], error_message);
}

function changing_name_view(param, error_message) {
  var dimension_item_to_edit = param[/* dimension_item_to_edit */0];
  return update_name_view(Curry._2(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "Re-name ",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  " from '",
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* String_literal */Block.__(11, [
                                          "' to ",
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "Re-name %s from '%s' to "
                    ]), DecisionMatrixEditing.DimensionItemToEdit.label(dimension_item_to_edit), DecisionMatrixEditing.DimensionItemToEdit.name(dimension_item_to_edit)), param[/* new_name */1], error_message);
}

function view(param) {
  var error_message = param[/* error_message */2];
  var interaction_state = param[/* interaction_state */1];
  var decision_matrix = param[/* decision_matrix */0];
  var factor_label = DecisionMatrix.DecisionMatrix.factor_editing[/* label */0];
  var alternative_label = DecisionMatrix.DecisionMatrix.alternative_editing[/* label */0];
  var update_cell_value = function (alternative_name, factor_name, value) {
    return /* UpdateCellValue */Block.__(8, [
              alternative_name,
              factor_name,
              value
            ]);
  };
  var instructions = function (s) {
    return Tea_html.p(undefined, undefined, /* [] */0, /* :: */[
                Tea_html.text(s),
                /* [] */0
              ]);
  };
  var match;
  if (typeof interaction_state === "number") {
    var display_matrix_view = should_display_matrix_view(decision_matrix);
    var add_factor_button = button_view(undefined, Curry._1(Printf.sprintf(/* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "+" */43,
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* End_of_format */0
                        ])
                    ]),
                  "+%s"
                ]), factor_label), /* StartAdding */Block.__(1, [/* Left */Block.__(0, [DecisionMatrix.DecisionMatrix.factor_editing])]));
    var add_alternative_button = button_view(undefined, Curry._1(Printf.sprintf(/* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "+" */43,
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* End_of_format */0
                        ])
                    ]),
                  "+%s"
                ]), alternative_label), /* StartAdding */Block.__(1, [/* Right */Block.__(1, [DecisionMatrix.DecisionMatrix.alternative_editing])]));
    var matrix_instructions = instructions("\r\nA Decision Matrix is an analytical tool for choosing between different Alternatives (aka Choices or Options) by rating how each Alternative \r\nscores for different Factors (aka Criteria). The analyst (you) determines the Weight (significance) of each Factor for the\r\ncurrent problem or situation. The Matrix displays the score for each alternative based upon the combination of its own ratings and the \r\nsituational weights. The Alternative with the highest score is the best choice based upon the given weights. \r\n");
    match = /* tuple */[
      display_matrix_view ? /* :: */[
          add_factor_button,
          /* :: */[
            add_alternative_button,
            /* :: */[
              button_view(undefined, "Re-Name", /* SelectItemTo */Block.__(0, [/* ChangeName */1])),
              /* :: */[
                button_view(undefined, "Remove", /* SelectItemTo */Block.__(0, [/* Delete */2])),
                /* :: */[
                  button_view(undefined, "Move", /* SelectItemTo */Block.__(0, [/* Move */0])),
                  /* :: */[
                    button_view(undefined, "Share to Url", /* SaveToUrl */4),
                    /* :: */[
                      button_view(undefined, "Reset", /* RequestReset */2),
                      /* :: */[
                        matrix_instructions,
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ] : /* :: */[
          add_factor_button,
          /* :: */[
            add_alternative_button,
            /* :: */[
              matrix_instructions,
              /* [] */0
            ]
          ]
        ],
      container_view(/* :: */[
            decision_matrix_view(Caml_option.some(update_cell_value), undefined, undefined, decision_matrix),
            /* :: */[
              error_view(error_message),
              /* [] */0
            ]
          ])
    ];
  } else {
    switch (interaction_state.tag | 0) {
      case /* SelectingItemTo */0 :
          var action = interaction_state[0];
          var message = function (action) {
            return Curry._3(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "Click the header link for the ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        " or ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* String_literal */Block.__(11, [
                                                " below to ",
                                                /* String */Block.__(2, [
                                                    /* No_padding */0,
                                                    /* String_literal */Block.__(11, [
                                                        ". Click Cancel if you would rather not.",
                                                        /* End_of_format */0
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ]),
                            "Click the header link for the %s or %s below to %s. Click Cancel if you would rather not."
                          ]), factor_label, alternative_label, action);
          };
          var tmp;
          switch (action) {
            case /* Move */0 :
                tmp = message("begin MOVING the element");
                break;
            case /* ChangeName */1 :
                tmp = message("RE-NAME the element");
                break;
            case /* Delete */2 :
                tmp = message("DELETE the element from the Decision Matrix");
                break;
            
          }
          match = /* tuple */[
            /* :: */[
              button_view(undefined, "Cancel", /* Cancel */0),
              /* :: */[
                instructions(tmp),
                /* [] */0
              ]
            ],
            decision_matrix_view(undefined, Caml_option.some((function (dimension_name) {
                        var item_to_edit;
                        item_to_edit = dimension_name.tag ? DecisionMatrixEditing.DimensionItemToEdit.make_alternative(dimension_name[0]) : DecisionMatrixEditing.DimensionItemToEdit.make_factor(dimension_name[0]);
                        var tmp;
                        switch (action) {
                          case /* Move */0 :
                              tmp = /* StartMoving */Block.__(4, [item_to_edit]);
                              break;
                          case /* ChangeName */1 :
                              tmp = /* StartChangingName */Block.__(2, [item_to_edit]);
                              break;
                          case /* Delete */2 :
                              tmp = /* RequestRemove */Block.__(6, [item_to_edit]);
                              break;
                          
                        }
                        return tmp;
                      })), undefined, decision_matrix)
          ];
          break;
      case /* MovingItem */1 :
          var dimension_item_to_edit = interaction_state[0];
          var highlight_predicate;
          if (dimension_item_to_edit.tag) {
            var name = dimension_item_to_edit[0][1];
            highlight_predicate = (function (alternative, _factor) {
                return Caml_obj.caml_equal(alternative, name);
              });
          } else {
            var name$1 = dimension_item_to_edit[0][1];
            highlight_predicate = (function (_alternative, factor) {
                return Caml_obj.caml_equal(factor, name$1);
              });
          }
          var can_move_to;
          if (dimension_item_to_edit.tag) {
            var name$2 = dimension_item_to_edit[0][1];
            can_move_to = (function (dimension_name) {
                if (dimension_name.tag) {
                  return Caml_obj.caml_notequal(dimension_name[0], name$2);
                } else {
                  return false;
                }
              });
          } else {
            var name$3 = dimension_item_to_edit[0][1];
            can_move_to = (function (dimension_name) {
                if (dimension_name.tag) {
                  return false;
                } else {
                  return Caml_obj.caml_notequal(dimension_name[0], name$3);
                }
              });
          }
          match = /* tuple */[
            /* :: */[
              button_view(undefined, "Done", /* Cancel */0),
              /* :: */[
                instructions("The original item will be placed after the next item you choose. Choose Done when finished moving items."),
                /* [] */0
              ]
            ],
            decision_matrix_view(undefined, Caml_option.some((function (dimension_name) {
                        if (Curry._1(can_move_to, dimension_name)) {
                          return /* MoveToAfter */Block.__(5, [dimension_name]);
                        }
                        
                      })), Caml_option.some(highlight_predicate), decision_matrix)
          ];
          break;
      case /* Adding */2 :
          match = /* tuple */[
            /* :: */[
              adding_view(interaction_state[0], error_message),
              /* [] */0
            ],
            decision_matrix_view(undefined, undefined, undefined, decision_matrix)
          ];
          break;
      case /* ChangingName */3 :
          match = /* tuple */[
            /* :: */[
              changing_name_view(interaction_state[0], error_message),
              /* [] */0
            ],
            decision_matrix_view(undefined, undefined, undefined, decision_matrix)
          ];
          break;
      case /* ShowingDialog */4 :
          match = /* tuple */[
            /* :: */[
              Dialog.view(interaction_state[0]),
              /* [] */0
            ],
            decision_matrix_view(undefined, undefined, undefined, decision_matrix)
          ];
          break;
      
    }
  }
  return container_view(/* :: */[
              Tea_html.div(undefined, undefined, /* :: */[
                    Tea_html.class$prime(Styles.top_controls_class),
                    /* [] */0
                  ], match[0]),
              /* :: */[
                Tea_html.hr(undefined, undefined, /* [] */0, /* [] */0),
                /* :: */[
                  match[1],
                  /* [] */0
                ]
              ]
            ]);
}

export {
  button_view ,
  button_link ,
  container_view ,
  decision_matrix_view ,
  should_display_matrix_view ,
  error_view ,
  update_name_view ,
  adding_view ,
  changing_name_view ,
  view ,
  
}
/* Dialog Not a pure module */
